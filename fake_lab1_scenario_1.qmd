---
title: "Fake Lab 1 Scenarios 1"
author: "Piotr Jacobsson"
format: html
---

## Introduction

This is a basic model covering single lab with no offsets in place. Our aim is to check that we get the correct estimates based on the data provided. 

```{r}
## Load packages

library(tidyverse)
library(rjags)
library(runjags)

```


```{r}
## Get the data
fl1_sc1_url <- "https://raw.githubusercontent.com/pete-jacobsson/fake_lab/main/fake1_scenario1.csv" 
fl1_sc1 <- read_csv(url(fl1_sc1_url))

```

### Now set up the model

```{r}

measurement <- fl1_sc1$measurement
instrument <- as.numeric(as.factor(fl1_sc1$instrument))
operator <- as.numeric(as.factor(fl1_sc1$operator))

n_total <- nrow(fl1_sc1)
n_instruments <- length(unique(fl1_sc1$instrument))
n_operators <- length(unique(fl1_sc1$operator))

measurement_mean <- mean(fl1_sc1$measurement)
measurement_sd <- sd(fl1_sc1$measurement)

```

### Prepare stuff for going into JAGS
```{r}
data_list <- list(
  measurement = measurement,
  instrument = instrument,
  operator = operator,
  n_total = n_total,
  n_instruments = n_instruments,
  n_operators = n_operators,
  measurement_mean = measurement_mean #,
  #measurement_sd <- measurement_sd
)
```

### Write JAGS model Core model 1
Core model 1 - the basic JAGS model. No treatment of SDs, no normalization.
```{r}
model_string <- "
  model {
    for (i in 1:n_total) {
      measurement[i] ~ dnorm( mu[i], 1 / 50)
      mu[i] <- a0 + a1[instrument[i]] + a2[operator[i]]
    }
    a0 ~ dnorm(measurement_mean, 1 / 50)
    #
    for (j1 in 1:n_instruments) { a1[j1] ~ dnorm(0, 1/50) }
    #
    for (j2 in 1:n_operators) { a2[j2] ~ dnorm(0, 1/50) }
    #
    # for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
    # a1a2[j1, j2] ~ dnorm(0, 1/50)
    # }}
}
"

writeLines(model_string, con = "core_model_1.txt")
```


### Run model
```{r}
parameters <- c("a0", "a1", "a2", "a1a2")
adapt_steps <- 1000
burn_in_steps <- 2000

run_jags_out <- run.jags(
  model = "core_model_1.txt",
  monitor = parameters,
  data = data_list,
  adapt = 10000,
  burnin = 10000,
  sample = 100000,
  thin = 10
)

testJAGS()
```

### Extract and view JAGS output
```{r}
coda_samples <- as.mcmc.list(run_jags_out)

test <- coda_samples[1]

test[[1]]

autocorr.plot(coda_samples)
effectiveSize(coda_samples)
summary(coda_samples)
gelman.plot(coda_samples)
```


```{r}
jags_results <- as.matrix(coda_samples)

jags_results[,5] |>
  hist()

```






