parameters <- c("b0", "b1", "b2", "ySigma", "a1sd", "a2sd")
adapt_steps <- 1000
burn_in_steps <- 2000
run_jags_out <- run.jags(
model = "core_model_1.txt",
monitor = parameters,
data = data_list,
n.chains = 4,
adapt = 1000,
burnin = 10000,
sample = 10000,
thin = 10,
method = "parallel"
)
model_string <- "
model {
for (i in 1:n_total) {
measurement[i] ~ dnorm( mu[i], 1 / (s1[instrument[i]] ^ 2 + s2[operator[i]] ^ 2))
mu[i] <- a0 + a1[instrument[i]] + a2[operator[i]]
}
a0 ~ dnorm(measurement_mean, 1 / 50)
#
for (j1 in 1:n_instruments) {
a1[j1] ~ dnorm(0, 1 / a1sd)
}
a1sd ~ dgamma(1.05, 0.01)
#
for (j2 in 1:n_operators) {
a2[j2] ~ dnorm(0, 1 / a2sd)
}
a2sd ~ dgamma(1.05, 0.01)
for (j1 in 1:n_instruments) {
s1[j1] ~ dnorm(0, 1 / s1sd)
}
s1sd ~ dgamma(1.05, 0.01)
#
for (s2 in 1:n_operators) {
s2[j2] ~ dnorm(0, 1 / s2sd)
}
s2sd ~ dgamma(1.05, 0.01)
#
# for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
# a1a2[j1, j2] ~ dnorm(0, 1/50)
# }}
##Sum zero constraints
for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
m[j1, j2] <- a0 + a1[j1] + a2[j2]
}}
b0 <- mean(m[1:n_instruments, 1:n_operators])
for ( j1 in 1:n_instruments ) { b1[j1] <- mean( m[j1,n_operators] ) - b0 }
for ( j2 in 1:n_operators ) { b2[j2] <- mean( m[1:n_instruments,j2] ) - b0 }
}
"
writeLines(model_string, con = "core_model_1.txt")
parameters <- c("b0", "b1", "b2", "ySigma", "a1sd", "a2sd")
adapt_steps <- 1000
burn_in_steps <- 2000
run_jags_out <- run.jags(
model = "core_model_1.txt",
monitor = parameters,
data = data_list,
n.chains = 4,
adapt = 1000,
burnin = 10000,
sample = 10000,
thin = 10,
method = "parallel"
)
model_string <- "
model {
for (i in 1:n_total) {
measurement[i] ~ dnorm( mu[i], 1 / (s1[instrument[i]] ^ 2 + s2[operator[i]] ^ 2))
mu[i] <- a0 + a1[instrument[i]] + a2[operator[i]]
}
a0 ~ dnorm(measurement_mean, 1 / 50)
#
for (j1 in 1:n_instruments) {
a1[j1] ~ dnorm(0, 1 / a1sd)
}
a1sd ~ dgamma(1.05, 0.01)
#
for (j2 in 1:n_operators) {
a2[j2] ~ dnorm(0, 1 / a2sd)
}
a2sd ~ dgamma(1.05, 0.01)
for (j1 in 1:n_instruments) {
s1[j1] ~ dnorm(0, 1 / s1sd)
}
s1sd ~ dgamma(1.05, 0.01)
#
for (j2 in 1:n_operators) {
s2[j2] ~ dnorm(0, 1 / s2sd)
}
s2sd ~ dgamma(1.05, 0.01)
#
# for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
# a1a2[j1, j2] ~ dnorm(0, 1/50)
# }}
##Sum zero constraints
for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
m[j1, j2] <- a0 + a1[j1] + a2[j2]
}}
b0 <- mean(m[1:n_instruments, 1:n_operators])
for ( j1 in 1:n_instruments ) { b1[j1] <- mean( m[j1,n_operators] ) - b0 }
for ( j2 in 1:n_operators ) { b2[j2] <- mean( m[1:n_instruments,j2] ) - b0 }
}
"
writeLines(model_string, con = "core_model_1.txt")
parameters <- c("b0", "b1", "b2", "ySigma", "a1sd", "a2sd")
adapt_steps <- 1000
burn_in_steps <- 2000
run_jags_out <- run.jags(
model = "core_model_1.txt",
monitor = parameters,
data = data_list,
n.chains = 4,
adapt = 1000,
burnin = 10000,
sample = 10000,
thin = 10,
method = "parallel"
)
model_string <- "
model {
for (i in 1:n_total) {
measurement[i] ~ dnorm( mu[i], 1 / sd[i]
mu[i] <- a0 + a1[instrument[i]] + a2[operator[i]]
sd[i] <- s1[instrument[i]] ^ 2 + s2[operator[i]] ^ 2
}
a0 ~ dnorm(measurement_mean, 1 / 50)
#
for (j1 in 1:n_instruments) {
a1[j1] ~ dnorm(0, 1 / a1sd)
}
a1sd ~ dgamma(1.05, 0.01)
#
for (j2 in 1:n_operators) {
a2[j2] ~ dnorm(0, 1 / a2sd)
}
a2sd ~ dgamma(1.05, 0.01)
for (j1 in 1:n_instruments) {
s1[j1] ~ dnorm(0, 1 / s1sd)
}
s1sd ~ dgamma(1.05, 0.01)
#
for (j2 in 1:n_operators) {
s2[j2] ~ dnorm(0, 1 / s2sd)
}
s2sd ~ dgamma(1.05, 0.01)
#
# for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
# a1a2[j1, j2] ~ dnorm(0, 1/50)
# }}
##Sum zero constraints
for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
m[j1, j2] <- a0 + a1[j1] + a2[j2]
}}
b0 <- mean(m[1:n_instruments, 1:n_operators])
for ( j1 in 1:n_instruments ) { b1[j1] <- mean( m[j1,n_operators] ) - b0 }
for ( j2 in 1:n_operators ) { b2[j2] <- mean( m[1:n_instruments,j2] ) - b0 }
}
"
writeLines(model_string, con = "core_model_1.txt")
parameters <- c("b0", "b1", "b2", "ySigma", "a1sd", "a2sd")
adapt_steps <- 1000
burn_in_steps <- 2000
run_jags_out <- run.jags(
model = "core_model_1.txt",
monitor = parameters,
data = data_list,
n.chains = 4,
adapt = 1000,
burnin = 10000,
sample = 10000,
thin = 10,
method = "parallel"
)
model_string <- "
model {
for (i in 1:n_total) {
measurement[i] ~ dnorm( mu[i], 1 / sd[i])
mu[i] <- a0 + a1[instrument[i]] + a2[operator[i]]
sd[i] <- s1[instrument[i]] ^ 2 + s2[operator[i]] ^ 2
}
a0 ~ dnorm(measurement_mean, 1 / 50)
#
for (j1 in 1:n_instruments) {
a1[j1] ~ dnorm(0, 1 / a1sd)
}
a1sd ~ dgamma(1.05, 0.01)
#
for (j2 in 1:n_operators) {
a2[j2] ~ dnorm(0, 1 / a2sd)
}
a2sd ~ dgamma(1.05, 0.01)
for (j1 in 1:n_instruments) {
s1[j1] ~ dnorm(0, 1 / s1sd)
}
s1sd ~ dgamma(1.05, 0.01)
#
for (j2 in 1:n_operators) {
s2[j2] ~ dnorm(0, 1 / s2sd)
}
s2sd ~ dgamma(1.05, 0.01)
#
# for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
# a1a2[j1, j2] ~ dnorm(0, 1/50)
# }}
##Sum zero constraints
for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
m[j1, j2] <- a0 + a1[j1] + a2[j2]
}}
b0 <- mean(m[1:n_instruments, 1:n_operators])
for ( j1 in 1:n_instruments ) { b1[j1] <- mean( m[j1,n_operators] ) - b0 }
for ( j2 in 1:n_operators ) { b2[j2] <- mean( m[1:n_instruments,j2] ) - b0 }
}
"
writeLines(model_string, con = "core_model_1.txt")
parameters <- c("b0", "b1", "b2", "ySigma", "a1sd", "a2sd")
adapt_steps <- 1000
burn_in_steps <- 2000
run_jags_out <- run.jags(
model = "core_model_1.txt",
monitor = parameters,
data = data_list,
n.chains = 4,
adapt = 1000,
burnin = 10000,
sample = 10000,
thin = 10,
method = "parallel"
)
model_string <- "
model {
for (i in 1:n_total) {
measurement[i] ~ dnorm( mu[i], 1 / sd[i])
mu[i] <- a0 + a1[instrument[i]] + a2[operator[i]]
sd[i] <- s1[instrument[i]] ^ 2 + s2[operator[i]] ^ 2
}
a0 ~ dnorm(measurement_mean, 1 / 50)
#
for (j1 in 1:n_instruments) {
a1[j1] ~ dnorm(0, 1 / a1sd)
}
a1sd ~ dgamma(1.05, 0.01)
#
for (j2 in 1:n_operators) {
a2[j2] ~ dnorm(0, 1 / a2sd)
}
a2sd ~ dgamma(1.05, 0.01)
for (j1 in 1:n_instruments) {
s1[j1] ~ dgamma(1.05, 0.01)
}
#
for (j2 in 1:n_operators) {
s2[j2] ~ dgamma(1.05, 0.01)
}
#
# for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
# a1a2[j1, j2] ~ dnorm(0, 1/50)
# }}
##Sum zero constraints
for (j1 in 1:n_instruments) { for (j2 in 1:n_operators) {
m[j1, j2] <- a0 + a1[j1] + a2[j2]
}}
b0 <- mean(m[1:n_instruments, 1:n_operators])
for ( j1 in 1:n_instruments ) { b1[j1] <- mean( m[j1,n_operators] ) - b0 }
for ( j2 in 1:n_operators ) { b2[j2] <- mean( m[1:n_instruments,j2] ) - b0 }
}
"
writeLines(model_string, con = "core_model_1.txt")
parameters <- c("b0", "b1", "b2", "ySigma", "a1sd", "a2sd")
adapt_steps <- 1000
burn_in_steps <- 2000
run_jags_out <- run.jags(
model = "core_model_1.txt",
monitor = parameters,
data = data_list,
n.chains = 4,
adapt = 1000,
burnin = 10000,
sample = 10000,
thin = 10,
method = "parallel"
)
testJAGS()
parameters <- c("b0", "b1", "b2", "s1", "s2", "a1sd", "a2sd")
adapt_steps <- 1000
burn_in_steps <- 2000
run_jags_out <- run.jags(
model = "core_model_1.txt",
monitor = parameters,
data = data_list,
n.chains = 4,
adapt = 1000,
burnin = 10000,
sample = 10000,
thin = 10,
method = "parallel"
)
testJAGS()
coda_samples <- as.mcmc.list(run_jags_out)
summary(coda_samples)
autocorr.plot(coda_samples)
effectiveSize(coda_samples)
traceplot(coda_samples)
parameters <- c("b0", "b1", "b2", "s1", "s2", "a1sd", "a2sd")
adapt_steps <- 1000
burn_in_steps <- 2000
run_jags_out <- run.jags(
model = "core_model_1.txt",
monitor = parameters,
data = data_list,
n.chains = 4,
adapt = 1000,
burnin = 10000,
sample = 20000,
thin = 10,
method = "parallel"
)
testJAGS()
coda_samples <- as.mcmc.list(run_jags_out)
autocorr.plot(coda_samples)
effectiveSize(coda_samples)
traceplot(coda_samples)
jags_results <- as.matrix(coda_samples) |>
as.data.frame()
colnames(jags_results) <- c( "mu_baseline", "mu_instrument_1", "mu_instrument_2",
"mu_instrument_3", "mu_instrument_4", "mu_instrument_5",
"mu_operator_1", "mu_operator_2", "mu_operator_3",
"sigma_instrument_1", "sigma_instrument_2",
"sigma_instrument_3", "sigma_instrument_4",
"sigma_instrument_5", "sigma_operator_1",
"sigma_operator_2", "sigma_operator_3")
jags_results <- as.matrix(coda_samples) |>
as.data.frame()
colnames(jags_results) <- c( "mu_baseline", "mu_instrument_1", "mu_instrument_2",
"mu_instrument_3", "mu_instrument_4", "mu_instrument_5",
"mu_operator_1", "mu_operator_2", "mu_operator_3",
"sigma_instrument_1", "sigma_instrument_2",
"sigma_instrument_3", "sigma_instrument_4",
"sigma_instrument_5", "sigma_operator_1",
"sigma_operator_2", "sigma_operator_3",
"mu_instrument_uncert", "mu_operator_uncert")
jags_results <- jags_results |>
pivot_longer(cols = everything()) |>
mutate(value = round(value, digits = 2)) |>
group_by(name, value) |>
summarize(
counts = n()
)
View(jags_results)
hpd_extract <- cbind(HPDinterval(coda_samples)[[1]],
HPDinterval(coda_samples)[[2]]) |>
as.data.frame() |>
rename("lower_1" = 1, "upper_1" = 2, "lower_2" = 3, "upper_2" = 4) |>
mutate(
lower = (lower_1 + lower_2) / 2,
upper = (upper_1 + upper_2) / 2) |>
rownames_to_column("name") |>
select(name, lower, upper)
View(hpd_extract)
###Extract HPD area
hpd_extract <- cbind(HPDinterval(coda_samples)[[1]],
HPDinterval(coda_samples)[[2]]) |>
as.data.frame() |>
rename("lower_1" = 1, "upper_1" = 2, "lower_2" = 3, "upper_2" = 4) |>
mutate(
lower = (lower_1 + lower_2) / 2,
upper = (upper_1 + upper_2) / 2) |>
rownames_to_column("name") |>
select(name, lower, upper) |>
mutate(
name = case_when(
name == "b0" ~ "baseline",
name == "b1[1]" ~ "mu_instrument_1",
name == "b1[2]" ~ "mu_instrument_2",
name == "b1[3]" ~ "mu_instrument_3",
name == "b1[4]" ~ "mu_instrument_4",
name == "b1[5]" ~ "mu_instrument_5",
name == "b2[1]" ~ "mu_operator_1",
name == "b2[2]" ~ "mu_operator_2",
name == "b2[3]" ~ "mu_operator_3",
name == "s1[1]" ~ "sigma_instrument_1",
name == "s1[2]" ~ "sigma_instrument_2",
name == "s1[3]" ~ "sigma_instrument_3",
name == "s1[4]" ~ "sigma_instrument_4",
name == "s1[5]" ~ "sigma_instrument_5",
name == "s2[1]" ~ "sigma_operator_1",
name == "s2[2]" ~ "sigma_operator_2",
name == "s2[3]" ~ "sigma_operator_3",
name == "a1sd" ~ "mu_instrument_uncert",
name == "a2sd" ~ "mu_operator_uncert"
)
)
###Join HPD areas to jags_results
jags_results_hpd <- inner_join(
jags_results, hpd_extract
) |>
mutate(
is_hpd = if_else(value > lower & value < upper, TRUE, FALSE)
)
###Check fig
jags_results_hpd |>
filter(str_detect(name, "sigma_operator")) |>
ggplot(aes(x = value, y = counts, fill = is_hpd)) +
geom_histogram(stat = "identity") +
geom_vline(xintercept = c(-2.5, 2.5)) +
facet_grid(rows=  vars(name))
###Check fig
jags_results_hpd |>
filter(str_detect(name, "sigma_instrument")) |>
ggplot(aes(x = value, y = counts, fill = is_hpd)) +
geom_histogram(stat = "identity") +
geom_vline(xintercept = c(-2.5, 2.5)) +
facet_grid(rows=  vars(name))
###Check fig
jags_results_hpd |>
filter(str_detect(name, "mu_instrument")) |>
ggplot(aes(x = value, y = counts, fill = is_hpd)) +
geom_histogram(stat = "identity") +
geom_vline(xintercept = c(-2.5, 2.5)) +
facet_grid(rows=  vars(name))
###Check fig - mu
jags_results_hpd |>
filter(str_detect(name, "mu_instrument")) |>
ggplot(aes(x = value, y = counts, fill = is_hpd)) +
geom_histogram(stat = "identity") +
geom_vline(xintercept = c(-2.5, 2.5)) +
facet_grid(rows=  vars(name)) +
ylim(c(-10, 10))
###Check fig - mu
jags_results_hpd |>
filter(str_detect(name, "mu_instrument")) |>
ggplot(aes(x = value, y = counts, fill = is_hpd)) +
geom_histogram(stat = "identity") +
geom_vline(xintercept = c(-2.5, 2.5)) +
facet_grid(rows=  vars(name)) +
xlim(c(-10, 10))
jags_results <- as.matrix(coda_samples) |>
as.data.frame()
colnames(jags_results) <- c( "mu_baseline", "mu_instrument_1", "mu_instrument_2",
"mu_instrument_3", "mu_instrument_4", "mu_instrument_5",
"mu_operator_1", "mu_operator_2", "mu_operator_3",
"sigma_instrument_1", "sigma_instrument_2",
"sigma_instrument_3", "sigma_instrument_4",
"sigma_instrument_5", "sigma_operator_1",
"sigma_operator_2", "sigma_operator_3",
"instrument_uncert", "operator_uncert")
jags_results <- jags_results |>
pivot_longer(cols = everything()) |>
mutate(value = round(value, digits = 2)) |>
group_by(name, value) |>
summarize(
counts = n()
)
###Extract HPD area
hpd_extract <- cbind(HPDinterval(coda_samples)[[1]],
HPDinterval(coda_samples)[[2]]) |>
as.data.frame() |>
rename("lower_1" = 1, "upper_1" = 2, "lower_2" = 3, "upper_2" = 4) |>
mutate(
lower = (lower_1 + lower_2) / 2,
upper = (upper_1 + upper_2) / 2) |>
rownames_to_column("name") |>
select(name, lower, upper) |>
mutate(
name = case_when(
name == "b0" ~ "baseline",
name == "b1[1]" ~ "mu_instrument_1",
name == "b1[2]" ~ "mu_instrument_2",
name == "b1[3]" ~ "mu_instrument_3",
name == "b1[4]" ~ "mu_instrument_4",
name == "b1[5]" ~ "mu_instrument_5",
name == "b2[1]" ~ "mu_operator_1",
name == "b2[2]" ~ "mu_operator_2",
name == "b2[3]" ~ "mu_operator_3",
name == "s1[1]" ~ "sigma_instrument_1",
name == "s1[2]" ~ "sigma_instrument_2",
name == "s1[3]" ~ "sigma_instrument_3",
name == "s1[4]" ~ "sigma_instrument_4",
name == "s1[5]" ~ "sigma_instrument_5",
name == "s2[1]" ~ "sigma_operator_1",
name == "s2[2]" ~ "sigma_operator_2",
name == "s2[3]" ~ "sigma_operator_3",
name == "a1sd" ~ "instrument_uncert",
name == "a2sd" ~ "operator_uncert"
)
)
###Join HPD areas to jags_results
jags_results_hpd <- inner_join(
jags_results, hpd_extract
) |>
mutate(
is_hpd = if_else(value > lower & value < upper, TRUE, FALSE)
)
###Check fig - mu
jags_results_hpd |>
filter(str_detect(name, "mu_instrument")) |>
ggplot(aes(x = value, y = counts, fill = is_hpd)) +
geom_histogram(stat = "identity") +
geom_vline(xintercept = c(-2.5, 2.5)) +
facet_grid(rows=  vars(name)) +
xlim(c(-10, 10))
###Check fig - mu
jags_results_hpd |>
filter(str_detect(name, "mu_operator")) |>
ggplot(aes(x = value, y = counts, fill = is_hpd)) +
geom_histogram(stat = "identity") +
geom_vline(xintercept = c(-2.5, 2.5)) +
facet_grid(rows=  vars(name)) +
xlim(c(-10, 10))
